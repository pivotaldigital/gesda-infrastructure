{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "subscriptionId": {
            "type": "string",
            "defaultValue": "[subscription().id]",
            "metadata": {
                "description": "Specify a subscription Id for the resources."
            }
        },
        "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 15,
            "metadata": {
                "description": "Specify a project name that is used to generate resource names."
            }
        },
        "nextJsAppName": {
            "type": "string",
            "minLength": 3,
            "maxLength": 15,
            "metadata": {
                "description": "Specify a project name that is used to generate resource names."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Specify a location for the resources."
            }
        },
        "hostingPlanName": {
            "type": "string",
            "defaultValue": "ASP-gesda-a3be"
        },
        "targetResourceGroup": {
            "type": "string",
            "defaultValue": "gesda"
        },
        "ftpsState": {
            "type": "string",
            "defaultValue": "FtpsOnly"
        },
        "autoGeneratedDomainNameLabelScope": {
            "type": "string",
            "defaultValue": "TenantReuse"
        },
        "sku": {
            "type": "string",
            "defaultValue": "Premium0V3"
        },
        "skuCode": {
            "type": "string",
            "defaultValue": "P0V3"
        },
        "workerSize": {
            "type": "string",
            "defaultValue": "18"
        },
        "workerSizeId": {
            "type": "string",
            "defaultValue": "18"
        },
        "numberOfWorkers": {
            "type": "string",
            "defaultValue": "1"
        },
        "kind": {
            "type": "string",
            "defaultValue": "linux"
        },
        "reserved": {
            "type": "bool",
            "defaultValue": true
        },
        "alwaysOn": {
            "type": "bool",
            "defaultValue": true
        },
        "linuxFxVersion": {
            "type": "string",
            "defaultValue": "DOCKER|mcr.microsoft.com/appsvc/wordpress-debian-php:8.3"
        },
        "dockerRegistryUrl": {
            "type": "string",
            "defaultValue": "https://mcr.microsoft.com"
        },
        "nextJsAppLinuxFxVersion": {
            "type": "string",
            "defaultValue": "DOCKER|mcr.microsoft.com/appsvc/wordpress-debian-php:8.3"
        },
        "nextJsAppDockerRegistryUrl": {
            "type": "string",
            "defaultValue": "https://mcr.microsoft.com"
        },
        "storageSizeGB": {
            "type": "int",
            "defaultValue": 128
        },
        "storageIops": {
            "type": "int",
            "defaultValue": 700
        },
        "storageAutoGrow": {
            "type": "string",
            "defaultValue": "Enabled"
        },
        "storageAutoIoScaling": {
            "type": "string",
            "defaultValue": "Enabled"
        },
        "backupRetentionDays": {
            "type": "int",
            "defaultValue": 7
        },
        "geoRedundantBackup": {
            "type": "string",
            "defaultValue": "Disabled"
        },
        "charset": {
            "type": "string",
            "defaultValue": "utf8"
        },
        "collation": {
            "type": "string",
            "defaultValue": "utf8_general_ci"
        },
        "vmName": {
            "type": "string",
            "defaultValue": "Standard_B2s"
        },
        "serverEdition": {
            "type": "string",
            "defaultValue": "Burstable"
        },
        "vCores": {
            "type": "int",
            "defaultValue": 2
        },
        "serverName": {
            "type": "string"
        },
        "serverUsername": {
            "type": "string"
        },
        "serverPassword": {
            "type": "securestring"
        },
        "databaseName": {
            "type": "string"
        },
        "publicNetworkAccess": {
            "type": "string",
            "defaultValue": "Disabled"
        },
        "stagingDatabaseName": {
            "type": "string"
        },
        "wordpressAdminEmail": {
            "type": "string"
        },
        "wordpressUsername": {
            "type": "string"
        },
        "wordpressPassword": {
            "type": "securestring"
        },
        "wpLocaleCode": {
            "type": "string"
        },
        "storageAccountName": {
            "type": "string",
            "defaultValue": "gesdapv8f815181"
        },
        "storageAccountType": {
            "type": "string",
            "defaultValue": "Standard_RAGRS"
        },
        "storageAccountKind": {
            "type": "string",
            "defaultValue": "StorageV2"
        },
        "accessTier": {
            "type": "string",
            "defaultValue": "Hot"
        },
        "minimumTlsVersion": {
            "type": "string",
            "defaultValue": "TLS1_2"
        },
        "supportsHttpsTrafficOnly": {
            "type": "bool",
            "defaultValue": true
        },
        "allowBlobPublicAccess": {
            "type": "bool",
            "defaultValue": true
        },
        "allowSharedKeyAccess": {
            "type": "bool",
            "defaultValue": true
        },
        "allowCrossTenantReplication": {
            "type": "bool",
            "defaultValue": true
        },
        "networkAclsBypass": {
            "type": "string",
            "defaultValue": "AzureServices"
        },
        "networkAclsDefaultAction": {
            "type": "string",
            "defaultValue": "Allow"
        },
        "keySource": {
            "type": "string",
            "defaultValue": "Microsoft.Storage"
        },
        "encryptionEnabled": {
            "type": "bool",
            "defaultValue": false
        },
        "infrastructureEncryptionEnabled": {
            "type": "bool",
            "defaultValue": false
        },
        "blobContainerName": {
            "type": "string",
            "defaultValue": "blobgesdapv8f815181"
        },
        "blobPublicAccessLevel": {
            "type": "string",
            "defaultValue": "blob"
        },
        "stagingBlobContainerName": {
            "type": "string",
            "defaultValue": "blobgesdapv8f815181staging"
        },
        "vnetName": {
            "type": "string",
            "defaultValue": "gesda-pv8f815181-vnet"
        },
        "subnetForApp": {
            "type": "string",
            "defaultValue": "gesda-pv8f815181-appsubnet"
        },
        "subnetForDb": {
            "type": "string",
            "defaultValue": "gesda-pv8f815181-dbsubnet"
        },
        "subnetForAg": {
            "type": "string",
            "defaultValue": "gesda-pv8f815181-agsubnet"
        },
        "subnetForStageAg": {
            "type": "string",
            "defaultValue": "gesda-pv8f815181-stageagsubnet"
        },
        "privateDnsZoneNameForDb": {
            "type": "string",
            "defaultValue": "gesda-pv8f815181-privatelink.mysql.database.azure.com"
        },
        "emailDataLocation": {
            "type": "string",
            "defaultValue": "switzerland"
        },
        "emailCommServiceName": {
            "type": "string",
            "defaultValue": "gesda-pv8f815181-emailacsendpoint"
        },
        "commServiceName": {
            "type": "string",
            "defaultValue": "gesda-pv8f815181-acsendpoint"
        },
        "managedIdentityName": {
            "type": "string",
            "defaultValue": "gesda-pv8f815181-wpidentity"
        },
        "registryName": {
            "type": "string"
        },
        "registryLocation": {
            "type": "string"
        },
        "zoneRedundancy": {
            "type": "string"
        },
        "registrySku": {
            "type": "string"
        },
        "registryPublicNetworkAccess": {
            "type": "string"
        },
        "kvName": {
            "type": "string"
        },
        "kvSku": {
            "type": "string"
        },
        "kvEnabledForDeployment": {
            "type": "bool"
        },
        "kvEnabledForTemplateDeployment": {
            "type": "bool"
        },
        "kvEnabledForDiskEncryption": {
            "type": "bool"
        },
        "kvEnableRbacAuthorization": {
            "type": "bool"
        },
        "kvPublicNetworkAccess": {
            "type": "string"
        },
        "kvEnableSoftDelete": {
            "type": "bool"
        },
        "kvSoftDeleteRetentionInDays": {
            "type": "int"
        },
        "kvNetworkAcls": {
            "type": "object"
        },
        "kvSecretName": {
            "type": "string"
        },
        "kvSecretValue": {
            "type": "securestring"
        },
        "kvStagingSecretName": {
            "type": "string"
        },
        "kvStagingSecretValue": {
            "type": "securestring"
        },
        "certificateName": {
            "type": "string",
            "metadata": {
                "description": "User friendly certificate resource name"
            }
        },
        "domainName": {
            "type": "string"
        },
        "stagingDomainName": {
            "type": "string"
        },
        "imageStorageNetworkAclsIpRules": {
            "type": "array"
        },
        "imageStorageAccountType": {
            "type": "string"
        },
        "imageStorageAccountName": {
            "type": "string"
        },
        "imageStorageKind": {
            "type": "string"
        },
        "imageStorageLocation": {
            "type": "string"
        }
    },
    "variables": {
        "appServicesApiVersion": "2021-03-01",
        "appGatewayApiVersion": "2024-05-01",
        "databaseApiVersion": "2021-12-01-preview",
        "databaseVersion": "8.0.21",
        "vnetDeploymentApiVersion": "2020-07-01",
        "privateDnsApiVersion": "2018-09-01",
        "publicIPAddressName": "[concat(parameters('name'),'-pip')]",
        "applicationGatewayName": "[concat(parameters('name'),'-agw')]",
        "vnetAddress": "10.0.0.0/16",
        "blobApiVersion": "2021-08-01",
        "storageAccountId": "[resourceId(parameters('targetResourceGroup'),'Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
        "emailApiVersion": "2023-03-31",
        "acsAccountId": "[resourceId('Microsoft.Communication/CommunicationServices', parameters('commServiceName'))]",
        "ecsAccountId": "[resourceId('Microsoft.Communication/emailServices/domains', parameters('emailCommServiceName'), 'AzureManagedDomain')]",
        "acsSenderEmailAddress": "DoNotReply",
        "managedIdentityApiVersion": "2018-11-30",
        "rbacAuthApiVersion": "2022-04-01",
        "roleDefinitionsApiVersion": "2022-04-01",
        "registryApiVersion": "2022-02-01-preview",
        "keyVaultApiVersion": "2022-02-01-preview",
        "identityID": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
    },
    "resources": [
        {
            "apiVersion": "[variables('registryApiVersion')]",
            "name": "[parameters('registryName')]",
            "type": "Microsoft.ContainerRegistry/registries",
            "location": "[parameters('registryLocation')]",
            "sku": {
                "name": "[parameters('registrySku')]"
            },
            "properties": {
                "publicNetworkAccess": "[parameters('registryPublicNetworkAccess')]",
                "zoneRedundancy": "[parameters('zoneRedundancy')]"
            }
        },
        {
            "apiVersion": "[variables('keyVaultApiVersion')]",
            "type": "Microsoft.KeyVault/vaults",
            "name": "[parameters('kvName')]",
            "location": "[parameters('location')]",
            "properties": {
                "enabledForDeployment": "[parameters('kvEnabledForDeployment')]",
                "enabledForTemplateDeployment": "[parameters('kvEnabledForTemplateDeployment')]",
                "enabledForDiskEncryption": "[parameters('kvEnabledForDiskEncryption')]",
                "enableRbacAuthorization": "[parameters('kvEnableRbacAuthorization')]",
                "accessPolicies": [
                    {
                        "tenantId": "[subscription().tenantId]",
                        "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), variables('managedIdentityApiVersion')).principalId]",
                        "permissions": {
                            "secrets": [
                                "get",
                                "list",
                                "set"
                            ],
                            "certificates": [
                                "get",
                                "list",
                                "create",
                                "import"
                            ]
                        }
                    },
                    {
                        "tenantId": "[subscription().tenantId]",
                        "objectId": "d2953198-f923-496c-a19f-b382f961c677",
                        "permissions": {
                            "secrets": [
                                "get",
                                "list",
                                "set"
                            ],
                            "certificates": [
                                "get",
                                "list",
                                "create",
                                "import"
                            ]
                        }
                    }
                ],
                "tenantId": "[subscription().tenantId]",
                "sku": {
                    "name": "[parameters('kvSku')]",
                    "family": "A"
                },
                "publicNetworkAccess": "[parameters('kvPublicNetworkAccess')]",
                "enableSoftDelete": "[parameters('kvEnableSoftDelete')]",
                "softDeleteRetentionInDays": "[parameters('kvSoftDeleteRetentionInDays')]",
                "networkAcls": "[parameters('kvNetworkAcls')]"
            },
            "dependsOn": [
                "[concat('Microsoft.ManagedIdentity/userAssignedIdentities/', parameters('managedIdentityName'))]"
            ]
        },
        {
            "apiVersion": "[variables('keyVaultApiVersion')]",
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[format('{0}/{1}', parameters('kvName'), parameters('kvSecretName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('kvName'))]"
            ],
            "properties": {
                "value": "[parameters('kvSecretValue')]",
                "recoveryLevel": "Purgeable"
            }
        },
        {
            "apiVersion": "[variables('keyVaultApiVersion')]",
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[format('{0}/{1}', parameters('kvName'), parameters('kvStagingSecretName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('kvName'))]"
            ],
            "properties": {
                "value": "[parameters('kvStagingSecretValue')]",
                "recoveryLevel": "Purgeable"
            }
        },
        {
            "type": "Microsoft.Web/certificates",
            "name": "[parameters('certificateName')]",
            "apiVersion": "2021-02-01",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('kvName'), parameters('kvSecretName'))]",
                "[resourceId('Microsoft.Web/serverfarms', parameters('hostingPlanName'))]",
                "[resourceId('Microsoft.Web/sites/hostNameBindings', parameters('name'), parameters('domainName'))]"
                
            ],
            "properties": {
                "canonicalName": "[parameters('domainName')]",
                "domainValidationMethod": "http-token",
                "keyVaultId": "[resourceId('Microsoft.KeyVault/vaults', parameters('kvName'))]",
                "keyVaultSecretName": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('kvName'), parameters('kvSecretName'))]",
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('hostingPlanName'))]"
            }
        },
        {
            "type": "Microsoft.Web/certificates",
            "name": "[format('{0}-{1}', parameters('certificateName'), 'staging')]",
            "apiVersion": "2021-02-01",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('kvName'), parameters('kvStagingSecretName'))]",
                "[resourceId('Microsoft.Web/serverfarms', parameters('hostingPlanName'))]",
                "[resourceId('Microsoft.Web/sites/slots/hostNameBindings', parameters('name'), 'staging', parameters('stagingDomainName'))]"
            ],
            "properties": {
                "canonicalName": "[parameters('stagingDomainName')]",
                "domainValidationMethod": "http-token",
                "keyVaultId": "[resourceId('Microsoft.KeyVault/vaults', parameters('kvName'))]",
                "keyVaultSecretName": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('kvName'), parameters('kvStagingSecretName'))]",
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('hostingPlanName'))]"
            }
        },
        {
            "apiVersion": "[variables('appServicesApiVersion')]",
            "name": "[parameters('name')]",
            "type": "Microsoft.Web/sites",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[concat('Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]",
                "[concat('Microsoft.DBforMySQL/flexibleServers/', parameters('serverName'))]",
                "[concat('Microsoft.DBforMySQL/flexibleServers/', parameters('serverName'), '/databases/', parameters('databaseName'))]",
                "[concat('Microsoft.ManagedIdentity/userAssignedIdentities/', parameters('managedIdentityName'))]",
                "[resourceId('Microsoft.DBforMySQL/flexibleServers/configurations', parameters('serverName'), 'aad_auth_only')]",
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), 'default', parameters('blobContainerName'))]"
            ],
            "properties": {
                "name": "[parameters('name')]",
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "DOCKER_REGISTRY_SERVER_URL",
                            "value": "[parameters('dockerRegistryUrl')]"
                        },
                        {
                            "name": "WEBSITES_ENABLE_APP_SERVICE_STORAGE",
                            "value": "true"
                        },
                        {
                            "name": "DB_HOST",
                            "value": "[concat(parameters('serverName'),'.mysql.database.azure.com')]"
                        },
                        {
                            "name": "DB_NAME",
                            "value": "[parameters('databaseName')]",
                            "slotSetting": true
                        },
                        {
                            "name": "WEBSITES_CONTAINER_START_TIME_LIMIT",
                            "value": "1800"
                        },
                        {
                            "name": "WORDPRESS_LOCALE_CODE",
                            "value": "[parameters('wpLocaleCode')]"
                        },
                        {
                            "name": "SETUP_PHPMYADMIN",
                            "value": "true"
                        },
                        {
                            "name": "WORDPRESS_LOCAL_STORAGE_CACHE_ENABLED",
                            "value": "true"
                        },
                        {
                            "name": "ENTRA_CLIENT_ID",
                            "value": "[reference(concat('/subscriptions/', parameters('subscriptionId'),'/resourcegroups/', parameters('targetResourceGroup'), '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/', parameters('managedIdentityName')), variables('managedIdentityApiVersion')).clientId]"
                        },
                        {
                            "name": "ENABLE_MYSQL_MANAGED_IDENTITY",
                            "value": "true"
                        },
                        {
                            "name": "DB_USER",
                            "value": "[parameters('managedIdentityName')]"
                        },
                        {
                            "name": "BLOB_STORAGE_ENABLED",
                            "value": "true"
                        },
                        {
                            "name": "STORAGE_ACCOUNT_NAME",
                            "value": "[parameters('storageAccountName')]"
                        },
                        {
                            "name": "BLOB_CONTAINER_NAME",
                            "value": "[parameters('blobContainerName')]"
                        },
                        {
                            "name": "BLOB_STORAGE_URL",
                            "value": "[concat(parameters('storageAccountName'),'.blob.core.windows.net')]"
                        },
                        {
                            "name": "STORAGE_ACCOUNT_KEY",
                            "value": "[listKeys(variables('storageAccountId'), '2019-04-01').keys[0].value]"
                        },
                        {
                            "name": "WP_ENV",
                            "value": "production",
                            "slotSetting": true
                        },
                        {
                            "name": "WP_HOME",
                            "value": "[concat('https://', parameters('domainName'))]",
                            "slotSetting": true
                        },
                        {
                            "name": "WP_SITEURL",
                            "value": "[concat('https://', parameters('domainName'), '/wp')]",
                            "slotSetting": true
                        }
                    ],
                    "connectionStrings": [
                        {
                            "name": "WORDPRESS_ADMIN_EMAIL",
                            "ConnectionString": "[parameters('wordpressAdminEmail')]",
                            "type": "Custom"
                        },
                        {
                            "name": "WORDPRESS_ADMIN_USER",
                            "ConnectionString": "[parameters('wordpressUsername')]",
                            "type": "Custom"
                        },
                        {
                            "name": "WORDPRESS_ADMIN_PASSWORD",
                            "ConnectionString": "[parameters('wordpressPassword')]",
                            "type": "Custom"
                        }
                    ],
                    "ftpsState": "[parameters('ftpsState')]",
                    "acrUseManagedIdentityCreds": true,
                    "acrUserManagedIdentityID": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), variables('managedIdentityApiVersion')).clientId]",
                    "linuxFxVersion": "DOCKER|gesdacontainerregistry.azurecr.io/gesda-wp:latest-production"
                },
                "serverFarmId": "[concat('/subscriptions/', parameters('subscriptionId'),'/resourcegroups/', parameters('targetResourceGroup'), '/providers/Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]",
                "clientAffinityEnabled": false,
                "autoGeneratedDomainNameLabelScope": "[parameters('autoGeneratedDomainNameLabelScope')]"
            },
            "identity": {
                "type": "UserAssigned",
                "UserAssignedIdentities": {
                    "[concat('/subscriptions/', parameters('subscriptionId'),'/resourcegroups/', parameters('targetResourceGroup'), '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/', parameters('managedIdentityName'))]": {}
                }
            }
        },
        {
            "type": "Microsoft.Web/sites/slots",
            "apiVersion": "[variables('appServicesApiVersion')]",
            "name": "[format('{0}/staging', parameters('name'))]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/Sites', parameters('name'))]",
                "[resourceId('Microsoft.Web/sites/config', parameters('name'), 'web')]",
                "[resourceId('Microsoft.DBforMySQL/flexibleServers/databases', parameters('serverName'), parameters('stagingDatabaseName'))]",
                "[resourceId('Microsoft.Web/sites/networkConfig', parameters('name'), 'virtualNetwork')]",
                "[resourceId('Microsoft.Communication/CommunicationServices', parameters('commServiceName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), 'default', parameters('stagingBlobContainerName'))]"
            ],
            "kind": "[parameters('kind')]",
            "properties": {
                "clientAffinityEnabled": false,
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('hostingPlanName'))]",
                "virtualNetworkSubnetId": "[concat('/subscriptions/', parameters('subscriptionId'),'/resourcegroups/', parameters('targetResourceGroup'), '/providers/Microsoft.Network/virtualNetworks/', parameters('vnetName'), '/subnets/', parameters('subnetForApp'))]",
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "DOCKER_REGISTRY_SERVER_URL",
                            "value": "[parameters('dockerRegistryUrl')]"
                        },
                        {
                            "name": "WEBSITES_ENABLE_APP_SERVICE_STORAGE",
                            "value": "true"
                        },
                        {
                            "name": "DB_HOST",
                            "value": "[concat(parameters('serverName'),'.mysql.database.azure.com')]"
                        },
                        {
                            "name": "DB_NAME",
                            "value": "[parameters('stagingDatabaseName')]",
                            "slotSetting": true
                        },
                        {
                            "name": "WEBSITES_CONTAINER_START_TIME_LIMIT",
                            "value": "1800"
                        },
                        {
                            "name": "WORDPRESS_LOCALE_CODE",
                            "value": "[parameters('wpLocaleCode')]"
                        },
                        {
                            "name": "SETUP_PHPMYADMIN",
                            "value": "true"
                        },
                        {
                            "name": "WORDPRESS_LOCAL_STORAGE_CACHE_ENABLED",
                            "value": "true"
                        },
                        {
                            "name": "ENTRA_CLIENT_ID",
                            "value": "[reference(concat('/subscriptions/', parameters('subscriptionId'),'/resourcegroups/', parameters('targetResourceGroup'), '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/', parameters('managedIdentityName')), variables('managedIdentityApiVersion')).clientId]"
                        },
                        {
                            "name": "ENABLE_MYSQL_MANAGED_IDENTITY",
                            "value": "true"
                        },
                        {
                            "name": "DB_USER",
                            "value": "[parameters('managedIdentityName')]"
                        },
                        {
                            "name": "BLOB_STORAGE_ENABLED",
                            "value": "true"
                        },
                        {
                            "name": "STORAGE_ACCOUNT_NAME",
                            "value": "[parameters('storageAccountName')]"
                        },
                        {
                            "name": "BLOB_CONTAINER_NAME",
                            "value": "[parameters('stagingBlobContainerName')]"
                        },
                        {
                            "name": "BLOB_STORAGE_URL",
                            "value": "[concat(parameters('storageAccountName'),'.blob.core.windows.net')]"
                        },
                        {
                            "name": "STORAGE_ACCOUNT_KEY",
                            "value": "[listKeys(variables('storageAccountId'), '2019-04-01').keys[0].value]"
                        },
                        {
                            "name": "WP_EMAIL_CONNECTION_STRING",
                            "value": "[concat('endpoint=',concat('https://',reference(variables('acsAccountId')).hostName),';senderaddress=',concat( variables('acsSenderEmailAddress'),'@',reference(variables('ecsAccountId')).mailFromSenderDomain))]"
                        },
                        {
                            "name": "ENABLE_EMAIL_MANAGED_IDENTITY",
                            "value": "true"
                        },
                        {
                            "name": "WP_ENV",
                            "value": "staging",
                            "slotSetting": true
                        },
                        {
                            "name": "WP_HOME",
                            "value": "[concat('https://', parameters('stagingDomainName'))]",
                            "slotSetting": true
                        },
                        {
                            "name": "WP_SITEURL",
                            "value": "[concat('https://', parameters('stagingDomainName'), '/wp')]",
                            "slotSetting": true
                        }
                    ],
                    "connectionStrings": [
                        {
                            "name": "WORDPRESS_ADMIN_EMAIL",
                            "ConnectionString": "[parameters('wordpressAdminEmail')]",
                            "type": "Custom"
                        },
                        {
                            "name": "WORDPRESS_ADMIN_USER",
                            "ConnectionString": "[parameters('wordpressUsername')]",
                            "type": "Custom"
                        },
                        {
                            "name": "WORDPRESS_ADMIN_PASSWORD",
                            "ConnectionString": "[parameters('wordpressPassword')]",
                            "type": "Custom"
                        }
                    ],
                    "ftpsState": "[parameters('ftpsState')]",
                    "alwaysOn": "[parameters('alwaysOn')]",
                    "acrUseManagedIdentityCreds": true,
                    "acrUserManagedIdentityID": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), variables('managedIdentityApiVersion')).clientId]",
                    "linuxFxVersion": "DOCKER|gesdacontainerregistry.azurecr.io/gesda-wp:latest-staging"
                }
            },
            "identity": {
                "type": "UserAssigned",
                "UserAssignedIdentities": {
                    "[concat('/subscriptions/', parameters('subscriptionId'),'/resourcegroups/', parameters('targetResourceGroup'), '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/', parameters('managedIdentityName'))]": {}
                }
            }
        },
        {
            "type": "Microsoft.Web/sites/hostNameBindings",
            "apiVersion": "2021-03-01",
            "name": "[format('{0}/{1}', parameters('name'), parameters('domainName'))]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
            ],
            "properties": {
                "siteName": "[parameters('name')]",
                "hostNameType": "Verified",
                "customHostNameDnsRecordType": "CName"
            }
        },
        {
            "type": "Microsoft.Web/sites/slots/hostNameBindings",
            "apiVersion": "2021-03-01",
            "name": "[concat(parameters('name'), '/staging/', parameters('stagingDomainName'))]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]",
                "[resourceId('Microsoft.Web/sites/slots', parameters('name'), 'staging')]"
            ],
            "properties": {
                "siteName": "[concat(parameters('name'), '/staging')]",
                "hostNameType": "Verified",
                "customHostNameDnsRecordType": "CName"
            }
        },
        {
            "apiVersion": "[variables('appServicesApiVersion')]",
            "name": "[parameters('nextJsAppName')]",
            "type": "Microsoft.Web/sites",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[concat('Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]",
                "[concat('Microsoft.ManagedIdentity/userAssignedIdentities/', parameters('managedIdentityName'))]"
            ],
            "kind": "app,linux,container",
            "properties": {
                "name": "[parameters('nextJsAppName')]",
                "siteConfig": {
                    "ftpsState": "Disabled",
                    "alwaysOn": "[parameters('alwaysOn')]",
                    "acrUseManagedIdentityCreds": true,
                    "acrUserManagedIdentityID": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), variables('managedIdentityApiVersion')).clientId]",
                    "appSettings": [
                        {
                            "name": "JWT_SECRET",
                            "value": "",
                            "slotSetting": true
                        },
                        {
                            "name": "API_KEY",
                            "value": "",
                            "slotSetting": true
                        }
                    ]
                },
                "serverFarmId": "[concat('/subscriptions/', parameters('subscriptionId'),'/resourcegroups/', parameters('targetResourceGroup'), '/providers/Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]",
                "clientAffinityEnabled": false,
                "autoGeneratedDomainNameLabelScope": "[parameters('autoGeneratedDomainNameLabelScope')]",
                "linuxFxVersion": "DOCKER|gesdacontainerregistry.azurecr.io/gesda-nextjs:latest-production"
            },
            "identity": {
                "type": "UserAssigned",
                "UserAssignedIdentities": {
                    "[concat('/subscriptions/', parameters('subscriptionId'),'/resourcegroups/', parameters('targetResourceGroup'), '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/', parameters('managedIdentityName'))]": {}
                }
            }
        },
        {
            "type": "Microsoft.Web/sites/slots",
            "apiVersion": "[variables('appServicesApiVersion')]",
            "name": "[format('{0}/staging', parameters('nextJsAppName'))]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/Sites', parameters('nextJsAppName'))]"
            ],
            "kind": "app,linux,container",
            "properties": {
                "clientAffinityEnabled": false,
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('hostingPlanName'))]",
                "virtualNetworkSubnetId": "[concat('/subscriptions/', parameters('subscriptionId'),'/resourcegroups/', parameters('targetResourceGroup'), '/providers/Microsoft.Network/virtualNetworks/', parameters('vnetName'), '/subnets/', parameters('subnetForApp'))]",
                "siteConfig": {
                    "ftpsState": "Disabled",
                    "alwaysOn": "[parameters('alwaysOn')]",
                    "acrUseManagedIdentityCreds": true,
                    "acrUserManagedIdentityID": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), variables('managedIdentityApiVersion')).clientId]",
                    "appSettings": [
                        {
                            "name": "JWT_SECRET",
                            "value": "",
                            "slotSetting": true
                        },
                        {
                            "name": "API_KEY",
                            "value": "",
                            "slotSetting": true
                        }
                    ],
                    "linuxFxVersion": "DOCKER|gesdacontainerregistry.azurecr.io/gesda-nextjs:latest-staging"
                }
            },
            "identity": {
                "type": "UserAssigned",
                "UserAssignedIdentities": {
                    "[concat('/subscriptions/', parameters('subscriptionId'),'/resourcegroups/', parameters('targetResourceGroup'), '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/', parameters('managedIdentityName'))]": {}
                }
            }
        },
        {
            "apiVersion": "[variables('appServicesApiVersion')]",
            "name": "[parameters('hostingPlanName')]",
            "type": "Microsoft.Web/serverfarms",
            "location": "[parameters('location')]",
            "kind": "[parameters('kind')]",
            "properties": {
                "name": "[parameters('hostingPlanName')]",
                "workerSize": "[parameters('workerSize')]",
                "workerSizeId": "[parameters('workerSizeId')]",
                "numberOfWorkers": "[parameters('numberOfWorkers')]",
                "reserved": "[parameters('reserved')]",
                "zoneRedundant": false
            },
            "sku": {
                "Tier": "[parameters('sku')]",
                "Name": "[parameters('skuCode')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.DBforMySQL/flexibleServers', parameters('serverName'))]"
            ]
        },
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "apiVersion": "[variables('managedIdentityApiVersion')]",
            "name": "[parameters('managedIdentityName')]",
            "location": "[parameters('location')]"
        },
        {
            "apiVersion": "[variables('databaseApiVersion')]",
            "location": "[parameters('location')]",
            "name": "[parameters('serverName')]",
            "type": "Microsoft.DBforMySQL/flexibleServers/",
            "properties": {
                "version": "[variables('databaseVersion')]",
                "administratorLogin": "[parameters('serverUsername')]",
                "administratorLoginPassword": "[parameters('serverPassword')]",
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                "Storage": {
                    "StorageSizeGB": "[parameters('storageSizeGB')]",
                    "Iops": "[parameters('storageIops')]",
                    "Autogrow": "[parameters('storageAutoGrow')]",
                    "AutoIoScaling": "[parameters('storageAutoIoScaling')]"
                },
                "Backup": {
                    "backupRetentionDays": "[parameters('backupRetentionDays')]",
                    "geoRedundantBackup": "[parameters('geoRedundantBackup')]"
                },
                "Network": {
                    "PrivateDnsZoneResourceId": "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneNameForDb'))]",
                    "DelegatedSubnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetForDb'))]"
                }
            },
            "sku": {
                "name": "[parameters('vmName')]",
                "tier": "[parameters('serverEdition')]",
                "capacity": "[parameters('vCores')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', parameters('privateDnsZoneNameForDb'), format('{0}-vnetlink', parameters('privateDnsZoneNameForDb')))]",
                "[concat('Microsoft.ManagedIdentity/userAssignedIdentities/', parameters('managedIdentityName'))]"
            ],
            "identity": {
                "type": "UserAssigned",
                "UserAssignedIdentities": {
                    "[concat('/subscriptions/', parameters('subscriptionId'),'/resourcegroups/', parameters('targetResourceGroup'), '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/', parameters('managedIdentityName'))]": {}
                }
            }
        },
        {
            "type": "Microsoft.DBforMySQL/flexibleServers/databases",
            "name": "[format('{0}/{1}', parameters('serverName'), parameters('databaseName') )]",
            "apiVersion": "[variables('databaseApiVersion')]",
            "properties": {
                "charset": "[parameters('charset')]",
                "collation": "[parameters('collation')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.DBforMySQL/flexibleServers', parameters('serverName'))]"
            ]
        },
        {
            "type": "Microsoft.DBforMySQL/flexibleServers/configurations",
            "apiVersion": "[variables('databaseApiVersion')]",
            "name": "[format('{0}/{1}', parameters('serverName'), 'sql_generate_invisible_primary_key')]",
            "dependsOn": [
                "[resourceId('Microsoft.DBforMySQL/flexibleServers', parameters('serverName'))]"
            ],
            "properties": {
                "value": "OFF"
            }
        },
        {
            "type": "Microsoft.DBforMySQL/flexibleServers/configurations",
            "name": "[format('{0}/{1}', parameters('serverName'), 'aad_auth_only')]",
            "apiVersion": "[variables('databaseApiVersion')]",
            "dependsOn": [
                "[resourceId('Microsoft.DBforMySQL/flexibleServers', parameters('serverName'))]",
                "[resourceId('Microsoft.DBforMySQL/flexibleServers/administrators', parameters('serverName'),'ActiveDirectory')]"
            ],
            "properties": {
                "value": "ON"
            }
        },
        {
            "type": "Microsoft.DBforMySQL/flexibleServers/administrators",
            "name": "[concat(parameters('serverName'),'/ActiveDirectory')]",
            "apiVersion": "[variables('databaseApiVersion')]",
            "dependsOn": [
                "[resourceId('Microsoft.DBforMySQL/flexibleServers', parameters('serverName'))]"
            ],
            "properties": {
                "administratorType": "ActiveDirectory",
                "login": "[parameters('managedIdentityName')]",
                "identityResourceId": "[concat('/subscriptions/', parameters('subscriptionId'),'/resourcegroups/', parameters('targetResourceGroup'), '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/', parameters('managedIdentityName'))]",
                "sid": "[reference(concat('/subscriptions/', parameters('subscriptionId'),'/resourcegroups/', parameters('targetResourceGroup'), '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/', parameters('managedIdentityName')), variables('managedIdentityApiVersion')).principalId]",
                "tenantId": "[reference(concat('/subscriptions/', parameters('subscriptionId'),'/resourcegroups/', parameters('targetResourceGroup'), '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/', parameters('managedIdentityName')), variables('managedIdentityApiVersion')).tenantId]"
            }
        },
        {
            "type": "Microsoft.DBforMySQL/flexibleServers/databases",
            "name": "[format('{0}/{1}', parameters('serverName'), parameters('stagingDatabaseName') )]",
            "apiVersion": "[variables('databaseApiVersion')]",
            "dependsOn": [
                "[resourceId('Microsoft.DBforMySQL/flexibleServers', parameters('serverName'))]"
            ],
            "properties": {
                "charset": "[parameters('charset')]",
                "collation": "[parameters('collation')]"
            }
        },
        {
            "apiVersion": "2020-05-01",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('publicIPAddressName')]",
            "location": "[parameters('location')]",
            "properties": {
                "publicIPAllocationMethod": "Static"
            },
            "sku": {
                "name": "Standard"
            }
        },
        {
            "apiVersion": "[variables('appGatewayApiVersion')]",
            "name": "[variables('applicationGatewayName')]",
            "type": "Microsoft.Network/applicationGateways",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks/', parameters('vnetName'))]",
                "[resourceId('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]",
                "[resourceId('Microsoft.Web/sites/', parameters('name'))]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('kvName'), parameters('kvSecretName'))]"
            ],
            "identity": {
                "type": "string",
                "userAssignedIdentities": {
                    "[variables('identityID')]": {}
                }
            },
            "properties": {
                "sku": {
                    "name": "Basic",
                    "tier": "Basic",
                    "family": "Generation_2",
                    "capacity": 2
                },
                "sslCertificates": [
                    {
                        "name": "appGatewaySslCert",
                        "properties": {
                            "keyVaultSecretId": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('kvName'), parameters('kvSecretName'))]"
                        }
                    }
                ],
                "gatewayIPConfigurations": [
                    {
                        "name": "appGatewayIpConfig",
                        "properties": {
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetForAg'))]"
                            }
                        }
                    }
                ],
                "frontendIPConfigurations": [
                    {
                        "name": "appGatewayFrontendIP",
                        "properties": {
                            "PublicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]"
                            }
                        }
                    }
                ],
                "frontendPorts": [
                    {
                        "name": "appGatewayFrontendPort",
                        "properties": {
                            "Port": 443
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "webGatewayBackendPool",
                        "properties": {
                            "BackendAddresses": [
                                {
                                    "IpAddress": "[reference(parameters('name')).defaultHostName]"
                                }
                            ]
                        }
                    },
                    {
                        "name": "nextJsGatewayBackendPool",
                        "properties": {
                            "BackendAddresses": [
                                {
                                    "IpAddress": "[reference(parameters('nextJsAppName')).defaultHostName]"
                                }
                            ]
                        }
                    }
                ],
                "backendHttpSettingsCollection": [
                    {
                        "name": "webGatewayBackendHttpSettings",
                        "properties": {
                            "Port": 443,
                            "Protocol": "Https",
                            "CookieBasedAffinity": "Disabled",
                            "PickHostNameFromBackendAddress": false,
                            "hostName": "[parameters('domainName')]",
                            "ProbeEnabled": true,
                            "Probe": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/probes/',variables('applicationGatewayName'), 'WPProbe')]"
                            }
                        }
                    },
                    {
                        "name": "nextJsGatewayBackendHttpSettings",
                        "properties": {
                            "Port": 443,
                            "Protocol": "Https",
                            "CookieBasedAffinity": "Disabled",
                            "PickHostNameFromBackendAddress": true,
                            "ProbeEnabled": true,
                            "Probe": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/probes/',variables('applicationGatewayName'), 'NextJSProbe')]"
                            }
                        }
                    }
                ],
                "httpListeners": [
                    {
                        "name": "appGatewayHttpListener",
                        "properties": {
                            "FrontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations/',variables('applicationGatewayName'), 'appGatewayFrontendIP')]"
                            },
                            "FrontendPort": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts/',variables('applicationGatewayName'), 'appGatewayFrontendPort')]"
                            },
                            "Protocol": "Https",
                            "SslCertificate": {
                                "Id": "[resourceId('Microsoft.Network/applicationGateways/sslCertificates',variables('applicationGatewayName'), 'appGatewaySslCert')]"
                            }
                        }
                    }
                ],
                "urlPathMaps": [
                    {
                        "name": "weburlpathmap",
                        "properties": {
                            "defaultBackendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools/', variables('applicationGatewayName'), 'webGatewayBackendPool')]"
                            },
                            "defaultBackendHttpSettings": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection/', variables('applicationGatewayName'), 'webGatewayBackendHttpSettings')]"
                            },
                            "pathRules": [
                                {
                                    "name": "vision",
                                    "properties": {
                                        "paths": [
                                            "/vision,/vision/*,/_next/*"
                                        ],
                                        "backendAddressPool": {
                                            "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools/', variables('applicationGatewayName'), 'nextJsGatewayBackendPool')]"
                                        },
                                        "backendHttpSettings": {
                                            "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection/', variables('applicationGatewayName'), 'nextJsGatewayBackendHttpSettings')]"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "requestRoutingRules": [
                    {
                        "Name": "webpathrule",
                        "properties": {
                            "RuleType": "PathBasedRouting",
                            "httpListener": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners/', variables('applicationGatewayName'), 'appGatewayHttpListener')]"
                            },
                            "urlPathMap": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/urlPathMaps/', variables('applicationGatewayName'), 'weburlpathmap')]"
                            },
                            "priority": 10
                        }
                    }
                ],
                "probes": [
                    {
                        "Name": "WPProbe",
                        "properties": {
                            "Protocol": "Https",
                            "Path": "/",
                            "Interval": 30,
                            "Timeout": 10,
                            "UnhealthyThreshold": 3,
                            "MinServers": 0,
                            "PickHostNameFromBackendHttpSettings": false,
                            "host": "[parameters('domainName')]"
                        }
                    },
                    {
                        "Name": "NextJSProbe",
                        "properties": {
                            "Protocol": "Https",
                            "Path": "/vision",
                            "Interval": 30,
                            "Timeout": 10,
                            "UnhealthyThreshold": 3,
                            "MinServers": 0,
                            "PickHostNameFromBackendHttpSettings": true
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2020-05-01",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[concat(variables('publicIPAddressName'), '-staging')]",
            "location": "[parameters('location')]",
            "properties": {
                "publicIPAllocationMethod": "Static"
            },
            "sku": {
                "name": "Standard"
            }
        },
        {
            "apiVersion": "[variables('appGatewayApiVersion')]",
            "name": "[concat(variables('applicationGatewayName'), '-staging')]",
            "type": "Microsoft.Network/applicationGateways",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks/', parameters('vnetName'))]",
                "[resourceId('Microsoft.Network/publicIPAddresses/', format('{0}-staging', variables('publicIPAddressName')))]",
                "[resourceId('Microsoft.Web/sites/', parameters('name'))]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('kvName'), parameters('kvStagingSecretName'))]"
            ],
            "identity": {
                "type": "string",
                "userAssignedIdentities": {
                    "[variables('identityID')]": {}
                }
            },
            "properties": {
                "sku": {
                    "name": "Basic",
                    "tier": "Basic",
                    "family": "Generation_2",
                    "capacity": 2
                },
                "sslCertificates": [
                    {
                        "name": "appGatewaySslCert",
                        "properties": {
                            "keyVaultSecretId": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('kvName'), parameters('kvStagingSecretName'))]"
                        }
                    }
                ],
                "gatewayIPConfigurations": [
                    {
                        "name": "appGatewayIpConfig",
                        "properties": {
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetForStageAg'))]"
                            }
                        }
                    }
                ],
                "frontendIPConfigurations": [
                    {
                        "name": "appGatewayFrontendIP",
                        "properties": {
                            "PublicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-staging', variables('publicIPAddressName')))]"
                            }
                        }
                    }
                ],
                "frontendPorts": [
                    {
                        "name": "appGatewayFrontendPort",
                        "properties": {
                            "Port": 443
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "webGatewayBackendPool",
                        "properties": {
                            "BackendAddresses": [
                                {
                                    "IpAddress": "[reference(resourceId('Microsoft.Web/sites/slots', parameters('name'), 'staging')).defaultHostName]"
                                }
                            ]
                        }
                    },
                    {
                        "name": "nextJsGatewayBackendPool",
                        "properties": {
                            "BackendAddresses": [
                                {
                                    "IpAddress": "[reference(resourceId('Microsoft.Web/sites/slots', parameters('nextJsAppName'), 'staging')).defaultHostName]"
                                }
                            ]
                        }
                    }
                ],
                "backendHttpSettingsCollection": [
                    {
                        "name": "webGatewayBackendHttpSettings",
                        "properties": {
                            "Port": 443,
                            "Protocol": "Https",
                            "CookieBasedAffinity": "Disabled",
                            "PickHostNameFromBackendAddress": false,
                            "hostName": "[parameters('stagingDomainName')]",
                            "ProbeEnabled": true,
                            "Probe": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/probes/', format('{0}-staging', variables('applicationGatewayName')), 'WPProbe')]"
                            }
                        }
                    },
                    {
                        "name": "nextJsGatewayBackendHttpSettings",
                        "properties": {
                            "Port": 443,
                            "Protocol": "Https",
                            "CookieBasedAffinity": "Disabled",
                            "PickHostNameFromBackendAddress": true,
                            "ProbeEnabled": true,
                            "Probe": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/probes/', format('{0}-staging', variables('applicationGatewayName')), 'NextJSProbe')]"
                            }
                        }
                    }
                ],
                "httpListeners": [
                    {
                        "name": "appGatewayHttpListener",
                        "properties": {
                            "FrontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations/', format('{0}-staging', variables('applicationGatewayName')), 'appGatewayFrontendIP')]"
                            },
                            "FrontendPort": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts/', format('{0}-staging', variables('applicationGatewayName')), 'appGatewayFrontendPort')]"
                            },
                            "Protocol": "Https",
                            "SslCertificate": {
                                "Id": "[resourceId('Microsoft.Network/applicationGateways/sslCertificates', format('{0}-staging', variables('applicationGatewayName')), 'appGatewaySslCert')]"
                            }
                        }
                    }
                ],
                "urlPathMaps": [
                    {
                        "name": "weburlpathmap",
                        "properties": {
                            "defaultBackendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools/', format('{0}-staging', variables('applicationGatewayName')), 'webGatewayBackendPool')]"
                            },
                            "defaultBackendHttpSettings": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection/', format('{0}-staging', variables('applicationGatewayName')), 'webGatewayBackendHttpSettings')]"
                            },
                            "pathRules": [
                                {
                                    "name": "vision",
                                    "properties": {
                                        "paths": [
                                            "/vision,/vision/*,/_next/*"
                                        ],
                                        "backendAddressPool": {
                                            "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools/', format('{0}-staging', variables('applicationGatewayName')), 'nextJsGatewayBackendPool')]"
                                        },
                                        "backendHttpSettings": {
                                            "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection/', format('{0}-staging', variables('applicationGatewayName')), 'nextJsGatewayBackendHttpSettings')]"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "requestRoutingRules": [
                    {
                        "Name": "webpathrule",
                        "properties": {
                            "RuleType": "PathBasedRouting",
                            "httpListener": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners/', format('{0}-staging', variables('applicationGatewayName')), 'appGatewayHttpListener')]"
                            },
                            "urlPathMap": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/urlPathMaps/', format('{0}-staging', variables('applicationGatewayName')), 'weburlpathmap')]"
                            },
                            "priority": 10
                        }
                    }
                ],
                "probes": [
                    {
                        "Name": "WPProbe",
                        "properties": {
                            "Protocol": "Https",
                            "Path": "/",
                            "Interval": 30,
                            "Timeout": 10,
                            "UnhealthyThreshold": 3,
                            "MinServers": 0,
                            "PickHostNameFromBackendHttpSettings": false,
                            "host": "[parameters('stagingDomainName')]"
                        }
                    },
                    {
                        "Name": "NextJSProbe",
                        "properties": {
                            "Protocol": "Https",
                            "Path": "/vision",
                            "Interval": 30,
                            "Timeout": 10,
                            "UnhealthyThreshold": 3,
                            "MinServers": 0,
                            "PickHostNameFromBackendHttpSettings": true
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "[variables('vnetDeploymentApiVersion')]",
            "location": "[parameters('location')]",
            "name": "[parameters('vnetName')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('vnetAddress')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[parameters('subnetForAg')]",
                        "properties": {
                            "addressPrefix": "10.0.0.0/25",
                            "delegations": [
                                {
                                    "name": "dlg-agService",
                                    "properties": {
                                        "serviceName": "Microsoft.Network/applicationGateways"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "[parameters('subnetForApp')]",
                        "properties": {
                            "addressPrefix": "10.0.0.128/25",
                            "delegations": [
                                {
                                    "name": "dlg-appService",
                                    "properties": {
                                        "serviceName": "Microsoft.Web/serverFarms"
                                    }
                                }
                            ],
                            "privateEndpointNetworkPolicies": "Disabled",
                            "privateLinkServiceNetworkPolicies": "Enabled",
                            "serviceEndpoints": [
                                {
                                    "service": "Microsoft.Storage"
                                }
                            ]
                        }
                    },
                    {
                        "name": "[parameters('subnetForDb')]",
                        "properties": {
                            "addressPrefix": "10.0.1.0/25",
                            "delegations": [
                                {
                                    "name": "dlg-dbService",
                                    "properties": {
                                        "serviceName": "Microsoft.DBforMySQL/flexibleServers"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "[parameters('subnetForStageAg')]",
                        "properties": {
                            "addressPrefix": "10.0.10.0/25",
                            "delegations": [
                                {
                                    "name": "dlg-agStageService",
                                    "properties": {
                                        "serviceName": "Microsoft.Network/applicationGateways"
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/privateDnsZones",
            "apiVersion": "[variables('privateDnsApiVersion')]",
            "name": "[parameters('privateDnsZoneNameForDb')]",
            "location": "global",
            "resources": [
                {
                    "type": "virtualNetworkLinks",
                    "apiVersion": "[variables('privateDnsApiVersion')]",
                    "name": "[format('{0}-vnetlink', parameters('privateDnsZoneNameForDb'))]",
                    "location": "global",
                    "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneNameForDb'))]"
                    ],
                    "properties": {
                        "virtualNetwork": {
                            "id": "[resourceId('Microsoft.Network/virtualNetworks/', parameters('vnetName'))]"
                        },
                        "registrationEnabled": false
                    }
                }
            ],
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks/', parameters('vnetName'))]"
            ]
        },
        {
            "apiVersion": "[variables('appServicesApiVersion')]",
            "type": "Microsoft.Web/sites/networkConfig",
            "name": "[format('{0}/{1}', parameters('name'), 'virtualNetwork')]",
            "properties": {
                "subnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetForApp'))]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/Sites', parameters('name'))]",
                "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', parameters('privateDnsZoneNameForDb'), format('{0}-vnetlink', parameters('privateDnsZoneNameForDb')))]"
            ]
        },
        {
            "type": "Microsoft.Communication/emailServices",
            "apiVersion": "[variables('emailApiVersion')]",
            "name": "[parameters('emailCommServiceName')]",
            "location": "global",
            "properties": {
                "dataLocation": "[parameters('emailDataLocation')]"
            }
        },
        {
            "type": "Microsoft.Communication/CommunicationServices",
            "apiVersion": "[variables('emailApiVersion')]",
            "name": "[parameters('commServiceName')]",
            "location": "global",
            "dependsOn": [
                "[resourceId('Microsoft.Communication/emailServices/domains', parameters('emailCommServiceName'), 'AzureManagedDomain')]"
            ],
            "properties": {
                "dataLocation": "[parameters('emailDataLocation')]",
                "linkedDomains": [
                    "[resourceId('Microsoft.Communication/emailServices/domains', parameters('emailCommServiceName'), 'AzureManagedDomain')]"
                ]
            }
        },
        {
            "type": "Microsoft.Communication/emailServices/domains",
            "apiVersion": "[variables('emailApiVersion')]",
            "name": "[concat(parameters('emailCommServiceName'), '/AzureManagedDomain')]",
            "location": "global",
            "dependsOn": [
                "[resourceId('Microsoft.Communication/emailServices', parameters('emailCommServiceName'))]"
            ],
            "properties": {
                "domainManagement": "AzureManaged",
                "userEngagementTracking": "Disabled"
            }
        },
        {
            "type": "Microsoft.Authorization/roleDefinitions",
            "apiVersion": "[variables('roleDefinitionsApiVersion')]",
            "name": "[guid(parameters('targetResourceGroup'), parameters('commServiceName'), 'CustomEmailContributorRole')]",
            "properties": {
                "roleName": "[concat('Custom Email Contributor Role - ', parameters('commServiceName'))]",
                "description": "Custom Email Contributor role for Azure Communication Services",
                "assignableScopes": [
                    "[format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('targetResourceGroup'))]"
                ],
                "permissions": [
                    {
                        "actions": [
                            "Microsoft.Communication/CommunicationServices/Read",
                            "Microsoft.Communication/CommunicationServices/Write"
                        ],
                        "notActions": [],
                        "dataActions": [],
                        "notDataActions": []
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "[variables('rbacAuthApiVersion')]",
            "name": "[guid(resourceId('Microsoft.Communication/CommunicationServices', parameters('commServiceName')), parameters('managedIdentityName'), 'Contributor')]",
            "scope": "[resourceId('Microsoft.Communication/CommunicationServices', parameters('commServiceName'))]",
            "properties": {
                "roleDefinitionId": "[concat('/subscriptions/', parameters('subscriptionId'), '/providers/Microsoft.Authorization/roleDefinitions/', guid(parameters('targetResourceGroup'), parameters('commServiceName'), 'CustomEmailContributorRole'))]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), variables('managedIdentityApiVersion')).principalId]"
            },
            "dependsOn": [
                "[concat('Microsoft.ManagedIdentity/userAssignedIdentities/', parameters('managedIdentityName'))]",
                "[resourceId('Microsoft.Communication/CommunicationServices', parameters('commServiceName'))]",
                "[resourceId('Microsoft.Authorization/roleDefinitions', guid(parameters('targetResourceGroup'), parameters('commServiceName'), 'CustomEmailContributorRole'))]"
            ]
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "[variables('rbacAuthApiVersion')]",
            "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName')), parameters('managedIdentityName'))]",
            "scope": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName'))]",
            "properties": {
                "roleDefinitionId": "[concat('/subscriptions/', parameters('subscriptionId'), '/providers/Microsoft.Authorization/roleDefinitions/', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), variables('managedIdentityApiVersion')).principalId]"
            },
            "dependsOn": [
                "[concat('Microsoft.ManagedIdentity/userAssignedIdentities/', parameters('managedIdentityName'))]",
                "[resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName'))]"
            ]
        },
        {
            "type": "Microsoft.Web/sites/config",
            "apiVersion": "[variables('appServicesApiVersion')]",
            "name": "[concat(parameters('name'), '/web')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/Sites', parameters('name'))]",
                "[resourceId('Microsoft.Communication/CommunicationServices', parameters('commServiceName'))]",
                "[resourceId('Microsoft.Web/sites/networkConfig', parameters('name'), 'virtualNetwork')]"
            ],
            "properties": {
                "alwaysOn": "[parameters('alwaysOn')]",
                "appSettings": [
                    {
                        "name": "DOCKER_REGISTRY_SERVER_URL",
                        "value": "[parameters('dockerRegistryUrl')]"
                    },
                    {
                        "name": "WEBSITES_ENABLE_APP_SERVICE_STORAGE",
                        "value": "true"
                    },
                    {
                        "name": "DB_HOST",
                        "value": "[concat(parameters('serverName'),'.mysql.database.azure.com')]"
                    },
                    {
                        "name": "DB_NAME",
                        "value": "[parameters('databaseName')]",
                        "slotSetting": true
                    },
                    {
                        "name": "DB_PORT",
                        "value": "[parameters('databaseName')]"
                    },
                    {
                        "name": "WEBSITES_CONTAINER_START_TIME_LIMIT",
                        "value": "1800"
                    },
                    {
                        "name": "WORDPRESS_LOCALE_CODE",
                        "value": "[parameters('wpLocaleCode')]"
                    },
                    {
                        "name": "SETUP_PHPMYADMIN",
                        "value": "true"
                    },
                    {
                        "name": "WORDPRESS_LOCAL_STORAGE_CACHE_ENABLED",
                        "value": "true"
                    },
                    {
                        "name": "ENTRA_CLIENT_ID",
                        "value": "[reference(concat('/subscriptions/', parameters('subscriptionId'),'/resourcegroups/', parameters('targetResourceGroup'), '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/', parameters('managedIdentityName')), variables('managedIdentityApiVersion')).clientId]"
                    },
                    {
                        "name": "ENABLE_MYSQL_MANAGED_IDENTITY",
                        "value": "true"
                    },
                    {
                        "name": "DB_USER",
                        "value": "[parameters('managedIdentityName')]"
                    },
                    {
                        "name": "BLOB_STORAGE_ENABLED",
                        "value": "true"
                    },
                    {
                        "name": "STORAGE_ACCOUNT_NAME",
                        "value": "[parameters('storageAccountName')]"
                    },
                    {
                        "name": "BLOB_CONTAINER_NAME",
                        "value": "[parameters('blobContainerName')]"
                    },
                    {
                        "name": "BLOB_STORAGE_URL",
                        "value": "[concat(parameters('storageAccountName'),'.blob.core.windows.net')]"
                    },
                    {
                        "name": "STORAGE_ACCOUNT_KEY",
                        "value": "[listKeys(variables('storageAccountId'), '2019-04-01').keys[0].value]"
                    },
                    {
                        "name": "WP_EMAIL_CONNECTION_STRING",
                        "value": "[concat('endpoint=',concat('https://',reference(variables('acsAccountId')).hostName),';senderaddress=',concat( variables('acsSenderEmailAddress'),'@',reference(variables('ecsAccountId')).mailFromSenderDomain))]"
                    },
                    {
                        "name": "ENABLE_EMAIL_MANAGED_IDENTITY",
                        "value": "true"
                    },
                    {
                        "name": "WP_ENV",
                        "value": "production",
                        "slotSetting": true
                    },
                    {
                        "name": "WP_HOME",
                        "value": "[concat('https://', parameters('domainName'))]",
                        "slotSetting": true
                    },
                    {
                        "name": "WP_SITEURL",
                        "value": "[concat('https://', parameters('domainName'), '/wp')]",
                        "slotSetting": true
                    }
                ]
            }
        },
        {
            "name": "[parameters('storageAccountName')]",
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "[variables('blobApiVersion')]",
            "location": "[parameters('location')]",
            "properties": {
                "accessTier": "[parameters('accessTier')]",
                "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
                "supportsHttpsTrafficOnly": "[parameters('supportsHttpsTrafficOnly')]",
                "allowBlobPublicAccess": "[parameters('allowBlobPublicAccess')]",
                "allowSharedKeyAccess": "[parameters('allowSharedKeyAccess')]",
                "allowCrossTenantReplication": "[parameters('allowCrossTenantReplication')]",
                "networkAcls": {
                    "bypass": "[parameters('networkAclsBypass')]",
                    "defaultAction": "[parameters('networkAclsDefaultAction')]",
                    "ipRules": []
                },
                "encryption": {
                    "keySource": "[parameters('keySource')]",
                    "services": {
                        "blob": {
                            "enabled": "[parameters('encryptionEnabled')]"
                        },
                        "file": {
                            "enabled": "[parameters('encryptionEnabled')]"
                        },
                        "table": {
                            "enabled": "[parameters('encryptionEnabled')]"
                        },
                        "queue": {
                            "enabled": "[parameters('encryptionEnabled')]"
                        }
                    },
                    "requireInfrastructureEncryption": "[parameters('infrastructureEncryptionEnabled')]"
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.DBforMySQL/flexibleServers', parameters('serverName'))]"
            ],
            "kind": "[parameters('storageAccountKind')]",
            "sku": {
                "name": "[parameters('storageAccountType')]"
            }
        },
        {
            "name": "[concat(parameters('storageAccountName'), '/default')]",
            "type": "Microsoft.Storage/storageAccounts/blobServices",
            "apiVersion": "[variables('blobApiVersion')]",
            "dependsOn": [
                "[resourceId('Microsoft.DBforMySQL/flexibleServers', parameters('serverName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            ],
            "properties": {
                "restorePolicy": {
                    "enabled": false
                },
                "deleteRetentionPolicy": {
                    "enabled": true,
                    "days": 7
                },
                "containerDeleteRetentionPolicy": {
                    "enabled": true,
                    "days": 7
                },
                "changeFeed": {
                    "enabled": false
                },
                "isVersioningEnabled": false
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "[variables('blobApiVersion')]",
            "name": "[concat(parameters('storageAccountName'), '/default/', parameters('blobContainerName'))]",
            "properties": {
                "immutableStorageWithVersioning": {
                    "enabled": false
                },
                "metadata": {},
                "publicAccess": "[parameters('blobPublicAccessLevel')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]"
            ]
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "[variables('blobApiVersion')]",
            "name": "[concat(parameters('storageAccountName'), '/default/', parameters('stagingBlobContainerName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), 'default', parameters('blobContainerName'))]"
            ],
            "properties": {
                "immutableStorageWithVersioning": {
                    "enabled": false
                },
                "metadata": {},
                "publicAccess": "[parameters('blobPublicAccessLevel')]"
            }
        },
        {
            "name": "[parameters('imageStorageAccountName')]",
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2024-01-01",
            "location": "[parameters('imageStorageLocation')]",
            "properties": {
                "minimumTlsVersion": "TLS1_2",
                "supportsHttpsTrafficOnly": true,
                "allowBlobPublicAccess": false,
                "allowSharedKeyAccess": true,
                "defaultToOAuthAuthentication": false,
                "accessTier": "Hot",
                "publicNetworkAccess": "Enabled",
                "allowCrossTenantReplication": false,
                "isHnsEnabled": true,
                "isSftpEnabled": true,
                "networkAcls": {
                    "bypass": "AzureServices",
                    "defaultAction": "Deny",
                    "ipRules": "[parameters('imageStorageNetworkAclsIpRules')]",
                    "virtualNetworkRules": [
                        {
                            "id": "[concat('/subscriptions/', parameters('subscriptionId'),'/resourcegroups/', parameters('targetResourceGroup'), '/providers/Microsoft.Network/virtualNetworks/', parameters('vnetName'), '/subnets/', parameters('subnetForApp'))]"
                        }
                    ]
                },
                "dnsEndpointType": "Standard",
                "largeFileSharesState": "Enabled",
                "encryption": {
                    "keySource": "Microsoft.Storage",
                    "services": {
                        "blob": {
                            "enabled": true
                        },
                        "file": {
                            "enabled": true
                        },
                        "table": {
                            "enabled": true
                        },
                        "queue": {
                            "enabled": true
                        }
                    },
                    "requireInfrastructureEncryption": false
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks/', parameters('vnetName'))]"
            ],
            "sku": {
                "name": "[parameters('imageStorageAccountType')]"
            },
            "kind": "[parameters('imageStorageKind')]"
        },
        {
            "name": "[concat(parameters('imageStorageAccountName'), '/default')]",
            "type": "Microsoft.Storage/storageAccounts/blobServices",
            "apiVersion": "2024-01-01",
            "properties": {
                "deleteRetentionPolicy": {
                    "enabled": true,
                    "days": 7
                },
                "containerDeleteRetentionPolicy": {
                    "enabled": true,
                    "days": 7
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', parameters('imageStorageAccountName'))]"
            ]
        },
        {
            "name": "[concat(parameters('imageStorageAccountName'), '/default')]",
            "type": "Microsoft.Storage/storageAccounts/fileservices",
            "apiVersion": "2024-01-01",
            "properties": {
                "shareDeleteRetentionPolicy": {
                    "enabled": true,
                    "days": 7
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', parameters('imageStorageAccountName'))]",
                "[concat(concat('Microsoft.Storage/storageAccounts/', parameters('imageStorageAccountName')), '/blobServices/default')]"
            ]
        }
    ]
}